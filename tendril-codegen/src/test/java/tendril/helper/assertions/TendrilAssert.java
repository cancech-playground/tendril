/*
 * Copyright 2024 Jaroslav Bosak
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://opensource.org/license/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package tendril.helper.assertions;

import java.util.List;

import org.junit.jupiter.api.Assertions;

import tendril.codegen.classes.ImportElement;
import tendril.codegen.classes.method.JMethod;
import tendril.codegen.field.value.JValue;
import tendril.codegen.field.value.JValueArray;
import tendril.test.assertions.CollectionAssert;

/**
 * Assertions to help with custom Tendril classes
 */
public class TendrilAssert {

    /**
     * Assertion to verify that two {@link ImportElement} instances are the same
     * 
     * @param expected {@link ImportElement} that is expected
     * @param actual   {@link ImportElement} that was actually generated by the code under test
     */
    public static void assertEquals(ImportElement expected, ImportElement actual) {
        assertImportData(expected.getPackageName(), expected.getClassName(), actual);
    }

    /**
     * Assertion to verify that the {@link ImportElement} is as expected
     * 
     * @param expected {@link Class} the class the import data is expected to reflect
     * @param actual   {@link ImportElement} to verify
     */
    public static void assertImportData(Class<?> expected, ImportElement actual) {
        assertImportData(expected.getPackageName(), expected.getSimpleName(), actual);
    }

    /**
     * Assertion to verify that the {@link ImportElement} is as expected
     * 
     * @param expectedPkg  {@link String} the expect package name of the import
     * @param expectedName {@link String} the expected class name of the import
     * @param actual       {@link ImportElement} to verify
     */
    public static void assertImportData(String expectedPkg, String expectedName, ImportElement actual) {
        Assertions.assertEquals(expectedPkg, actual.getPackageName(), "ImportData package name mismatch");
        Assertions.assertEquals(expectedName, actual.getClassName(), "ImportData class name mismatch");
    }

    /**
     * Verify that a {@link JMethod} matches expectations
     * 
     * @param expected {@link JMethod} that is expected
     * @param actual   {@link JMethod} that was actually produced
     */
    public static void assertMethodElement(JMethod<?> expected, JMethod<?> actual) {
        Assertions.assertEquals(expected.getType(), actual.getType());
        Assertions.assertEquals(expected.getName(), actual.getName());
        Assertions.assertEquals(expected.getAnnotations(), actual.getAnnotations());
        Assertions.assertEquals(expected.getParameters(), actual.getParameters());
    }

    /**
     * Verify that a {@link JValue} matches expectations
     * 
     * @param expected {@link JValue} that is expected
     * @param actual   {@link JValue} that is actually produced
     */
    public static void assertJValue(JValue<?, ?> expected, JValue<?, ?> actual) {
        Assertions.assertEquals(expected.getType(), actual.getType());
        Assertions.assertEquals(expected.getValue(), actual.getValue());
    }

    /**
     * Verify that a {@link JValueArray} matches expectations
     * 
     * @param expected {@link JValueArray} that is expected
     * @param actual   {@link JValueArray} that is actually produced
     */
    @SuppressWarnings("unchecked")
    public static void assertJValue(JValueArray<?, ?> expected, JValueArray<?, ?> actual) {
        Assertions.assertEquals(expected.getType(), actual.getType());

        List<JValue<?,?>> expectedValues = (List<JValue<?, ?>>) (Object) expected.getValue();
        List<JValue<?,?>> actualValues = (List<JValue<?, ?>>) (Object) actual.getValue();
        CollectionAssert.assertSize(expectedValues, actualValues);
        for (int i = 0; i < expectedValues.size(); i++)
            assertJValue(expectedValues.get(i), actualValues.get(i));
    }
}
