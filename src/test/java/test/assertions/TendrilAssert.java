package test.assertions;

import org.junit.jupiter.api.Assertions;

import tendril.dom.classes.ImportElement;
import tendril.dom.method.MethodElement;
import tendril.dom.type.value.ValueElement;

/**
 * Assertions to help with custom Tendril classes
 */
public class TendrilAssert {

    /**
     * Assertion to verify that two {@link ImportElement} instances are the same
     * 
     * @param expected {@link ImportElement} that is expected
     * @param actual   {@link ImportElement} that was actually generated by the code under test
     */
    public static void assertEquals(ImportElement expected, ImportElement actual) {
        assertImportData(expected.getPackageName(), expected.getClassName(), actual);
    }

    /**
     * Assertion to verify that the {@link ImportElement} is as expected
     * 
     * @param expectedPkg  {@link String} the expect package name of the import
     * @param expectedName {@link String} the expected class name of the import
     * @param actual       {@link ImportElement} to verify
     */
    public static void assertImportData(String expectedPkg, String expectedName, ImportElement actual) {
        TestHelper.assertEquals(expectedPkg, actual.getPackageName(), "ImportData package name mismatch");
        TestHelper.assertEquals(expectedName, actual.getClassName(), "ImportData class name mismatch");
    }

    /**
     * Verify that a {@link MethodElement} matches expectations
     * 
     * @param expected {@link MethodElement} that is expected
     * @param actual   {@link MethodElement} that was actually produced
     */
    public static void assertMethodElement(MethodElement<?> expected, MethodElement<?> actual) {
        Assertions.assertEquals(expected.getType(), actual.getType());
        Assertions.assertEquals(expected.getName(), actual.getName());
        Assertions.assertEquals(expected.getAnnotations(), actual.getAnnotations());
        Assertions.assertEquals(expected.getParameters(), actual.getParameters());
    }

    /**
     * Verify that a {@link ValueElement} matches expectations
     * 
     * @param expected {@link ValueElement} that is expected
     * @param actual   {@link ValueElement} that is actually produced
     */
    public static void assertValueElement(ValueElement<?, ?> expected, ValueElement<?, ?> actual) {
        Assertions.assertEquals(expected.getType(), actual.getType());
        Assertions.assertEquals(expected.getValue(), actual.getValue());
    }
}
